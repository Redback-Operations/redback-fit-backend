"""add password_hash to user_credential

Revision ID: 5468fe84a8c4
Revises: f0718851c3d3
Create Date: 2025-08-21 22:51:49.978484

"""
from alembic import op
import sqlalchemy as sa

from werkzeug.security import generate_password_hash


# revision identifiers, used by Alembic.
revision = '5468fe84a8c4'
down_revision = 'f0718851c3d3'
branch_labels = None
depends_on = None


def upgrade():
    # 1) Add column as NULLABLE first
    op.add_column(
        'user_credential',
        sa.Column('password_hash', sa.String(length=255), nullable=True)
    )

    # 2) Backfill existing rows with an unusable/placeholder hash
    #    (so users created before this migration will need a reset)
    bind = op.get_bind()

    # Generate one consistent placeholder hash (or generate per row if you prefer)
    placeholder_hash = generate_password_hash("reset-required")

    # Update all rows that have NULL password_hash
    bind.execute(
        sa.text("""
            UPDATE user_credential
            SET password_hash = :ph
            WHERE password_hash IS NULL
        """),
        {"ph": placeholder_hash}
    )

    # 3) Enforce NOT NULL now that every row has a value
    op.alter_column('user_credential', 'password_hash', nullable=False)


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('user_credential', schema=None) as batch_op:
        batch_op.add_column(sa.Column('firebase_uid', sa.VARCHAR(length=128), autoincrement=False, nullable=False))
        batch_op.create_index('ix_user_credential_firebase_uid', ['firebase_uid'], unique=True)
        batch_op.drop_column('password_hash')

    # ### end Alembic commands ###
